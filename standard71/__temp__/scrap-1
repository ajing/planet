 #https://discuss.pytorch.org/t/how-to-combine-multiple-criterions-to-a-loss-function/348/4



 <class 'net.model.pyramidnet.PyNet_10'>
  1.0      83    0.1000   |  0.179  | 0.159  0.864 | 0.185  0.807  |  0.7 min
  2.0      83    0.1000   |  0.154  | 0.171  0.823 | 0.145  0.861  |  0.6 min
  3.0      83    0.1000   |  0.152  | 0.137  0.878 | 0.167  0.825  |  0.6 min
  4.0      83    0.1000   |  0.143  | 0.128  0.882 | 0.141  0.861  |  0.6 min
  5.0      83    0.1000   |  0.139  | 0.145  0.862 | 0.141  0.862  |  0.6 min
  6.0      83    0.1000   |  0.138  | 0.131  0.871 | 0.137  0.868  |  0.6 min

##---------------------------
<class 'net.model.pyramidnet.PyNet_11'>
def make_flat(out):
    #flat =  F.adaptive_avg_pool2d(out,output_size=4)
    out  = F.avg_pool2d(out,kernel_size=4, stride=2, padding=0)
    out  = F.adaptive_max_pool2d(out,output_size=1)
    flat = out.view(out.size(0), -1)
    return flat

 1.0      83    0.1000   |  0.173  | 0.154  0.844 | 0.188  0.804  |  0.7 min
  2.0      83    0.1000   |  0.163  | 0.157  0.849 | 0.160  0.842  |  0.6 min
  3.0      83    0.1000   |  0.151  | 0.134  0.881 | 0.141  0.868  |  0.6 min
  4.0      83    0.1000   |  0.142  | 0.131  0.875 | 0.152  0.856  |  0.6 min
  5.0      83    0.1000   |  0.142  | 0.136  0.868 | 0.141  0.866  |  0.7 min
  6.0      83    0.1000   |  0.142  | 0.152  0.866 | 0.133  0.875  |  0.7 min
  7.0      83    0.1000   |  0.135  | 0.122  0.900 | 0.136  0.870  |  0.7 min
  8.0      83    0.1000   |  0.136  | 0.118  0.891 | 0.171  0.834  |  0.7 min
  9.0      83    0.1000   |  0.137  | 0.146  0.846 | 0.132  0.876  |  0.7 min
 10.0      83    0.1000   |  0.132  | 0.152  0.836 | 0.134  0.867  |  0.7 min
 11.0      83    0.0100   |  0.127  | 0.119  0.883 | 0.117  0.893  |  0.7 min
 12.0      83    0.0100   |  0.119  | 0.107  0.913 | 0.115  0.895  |  0.7 min
 13.0      83    0.0100   |  0.121  | 0.139  0.871 | 0.114  0.896  |  0.7 min
 14.0      83    0.0100   |  0.119  | 0.128  0.886 | 0.114  0.897  |  0.6 min




def make_flat(out):
    #flat =  F.adaptive_avg_pool2d(out,output_size=4)
    out  = F.avg_pool2d(out,kernel_size=2, stride=1, padding=0)
    out  = F.adaptive_max_pool2d(out,output_size=1)
    flat = out.view(out.size(0), -1)
    return flat

** start training here! **
 optimizer=<torch.optim.sgd.SGD object at 0x7ff613a98b00>
 epoch   iter   rate  |  smooth_loss   |  train_loss  (acc)  |  valid_loss  (acc)  | min
----------------------------------------------------------------------------------------
  1.0      83    0.1000   |  0.174  | 0.189  0.831 | 0.211  0.771  |  0.7 min
  2.0      83    0.1000   |  0.160  | 0.170  0.840 | 0.155  0.831  |  0.7 min
  3.0      83    0.1000   |  0.152  | 0.142  0.843 | 0.160  0.834  |  0.7 min
  4.0      83    0.1000   |  0.144  | 0.164  0.847 | 0.144  0.857  |  0.7 min
  5.0      83    0.1000   |  0.139  | 0.134  0.873 | 0.227  0.769  |  0.7 min
  6.0      83    0.1000   |  0.143  | 0.136  0.887 | 0.132  0.876  |  0.7 min
  7.0      83    0.1000   |  0.129  | 0.149  0.872 | 0.141  0.861  |  0.7 min
  8.0      83    0.1000   |  0.131  | 0.169  0.827 | 0.131  0.875  |  0.7 min
  9.0      83    0.1000   |  0.130  | 0.131  0.887 | 0.162  0.842  |  0.7 min
 10.0      83    0.1000   |  0.134  | 0.144  0.871 | 0.152  0.855  |  0.7 min
 11.0      83    0.0100   |  0.123  | 0.121  0.888 | 0.115  0.895  |  0.7 min
 12.0      83    0.0100   |  0.121  | 0.126  0.900 | 0.117  0.893  |  0.7 min
 13.0      83    0.0100   |  0.117  | 0.115  0.909 | 0.114  0.897  |  0.7 min





def make_flat(out):
    out =  F.adaptive_avg_pool2d(out,output_size=4)
    #out  = F.avg_pool2d(out,kernel_size=2, stride=1, padding=0)
    out  = F.adaptive_max_pool2d(out,output_size=1)
    flat = out.view(out.size(0), -1)
    return flat


** start training here! **
 optimizer=<torch.optim.sgd.SGD object at 0x7f26f3029b00>
 epoch   iter   rate  |  smooth_loss   |  train_loss  (acc)  |  valid_loss  (acc)  | min
----------------------------------------------------------------------------------------
  1.0      83    0.1000   |  0.183  | 0.173  0.839 | 0.186  0.805  |  0.7 min
  2.0      83    0.1000   |  0.165  | 0.174  0.847 | 0.231  0.773  |  0.7 min
  3.0      83    0.1000   |  0.152  | 0.131  0.878 | 0.153  0.846  |  0.7 min
  4.0      83    0.1000   |  0.151  | 0.138  0.882 | 0.174  0.830  |  0.6 min
  5.0      83    0.1000   |  0.146  | 0.141  0.872 | 0.179  0.813  |  0.6 min
  6.0      83    0.1000   |  0.152  | 0.170  0.848 | 0.143  0.866  |  0.6 min
  7.0      83    0.1000   |  0.133  | 0.136  0.863 | 0.131  0.878  |  0.6 min
  8.0      83    0.1000   |  0.142  | 0.138  0.862 | 0.136  0.871  |  0.6 min
  9.0      83    0.1000   |  0.137  | 0.125  0.873 | 0.181  0.815  |  0.7 min
 10.0      83    0.1000   |  0.133  | 0.129  0.876 | 0.173  0.832  |  0.7 min
 10.2      20    0.0100   |  0.132  | 0.117  0.883 | ...


def make_flat(out):
    #out =  F.adaptive_avg_pool2d(out,output_size=4)
    out  = F.avg_pool2d(out,kernel_size=3, stride=1, padding=0)
    out  = F.adaptive_max_pool2d(out,output_size=1)
    flat = out.view(out.size(0), -1)
    return flat
