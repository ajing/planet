/opt/anaconda3/bin/python3.6 /root/share/project/pytorch/build/standard-7/train-forest-0.py
train-forest-0.py: calling main function ...

--- [START 2017-06-06 22:00:40] ----------------------------------------------------------------

** some experiment setting **
	SEED    = 123
	file    = /root/share/project/pytorch/build/standard-7/train-forest-0.py
	out_dir = /root/share/project/pytorch/results/kaggle-forest/resnet18-cyclic-new-13

** dataset setting **
	(height,width) = (256, 256)
	in_channels    = 3
	train_dataset.split  = train-32479
	train_dataset.num    = 32479
	test_dataset.split   = valid-8000
	test_dataset.num     = 8000
	batch_size           = 96
	train_loader.sampler = <torch.utils.data.sampler.RandomSampler object at 0x7f48fb5b75f8>
	test_loader.sampler  = <torch.utils.data.sampler.SequentialSampler object at 0x7f48fb5b7550>

** net setting **
<class 'net.model.resnet.ResNet'>

    def __init__(self, block, layers, in_shape=(3,244,244), num_classes=1000):
        self.inplanes = 64

        super(ResNet, self).__init__()
        in_channels, height, width = in_shape

        self.conv1 = nn.Conv2d(in_channels, 64, kernel_size=7, stride=2, padding=3, bias=False)
        self.bn1  = nn.BatchNorm2d(64)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        self.layer1 = self._make_layer(block, 64, layers[0])
        self.layer2 = self._make_layer(block, 128, layers[1], stride=2)
        self.layer3 = self._make_layer(block, 256, layers[2], stride=2)
        self.layer4 = self._make_layer(block, 512, layers[3], stride=2)

        self.fc = nn.Linear(512 * block.expansion, num_classes)

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.maxpool(x)

        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        #x = F.dropout(x8,p=0.5,training=self.training)
        #x = nn.AvgPool2d(kernel_size=7)
        #x = F.adaptive_avg_pool2d(x,output_size=1) + F.adaptive_max_pool2d(x,output_size=1)
        #x = F.adaptive_max_pool2d(x8,output_size=1)
        x = F.adaptive_avg_pool2d(x,output_size=1)
        x = x.view(x.size(0), -1)
        x = self.fc(x)

        logit = x
        prob  = F.sigmoid(logit)
        return logit, prob


--missing keys at load_valid():--
	 fc.weight
	 fc.bias
------------------------
** start training here! **
 optimizer=<torch.optim.sgd.SGD object at 0x7f48fb5b7dd8>
 LR=Cyclical Learning Rates
base_lr=0.001, max_lr=0.010

 epoch   iter   rate  |  smooth_loss   |  train_loss  (acc)  |  valid_loss  (acc)  | min
----------------------------------------------------------------------------------------
  1.0     338    0.0028   |  0.156  | 0.155  0.866 | 0.149  0.864  |  1.2 min
  2.0     338    0.0046   |  0.127  | 0.138  0.874 | 0.123  0.889  |  1.2 min
  3.0     338    0.0064   |  0.117  | 0.097  0.917 | 0.109  0.903  |  1.2 min
  4.0     338    0.0082   |  0.111  | 0.126  0.891 | 0.102  0.910  |  1.2 min
  5.0     338    0.0100   |  0.106  | 0.101  0.907 | 0.098  0.911  |  1.2 min
  6.0     338    0.0082   |  0.097  | 0.128  0.881 | 0.095  0.916  |  1.2 min
  7.0     338    0.0064   |  0.100  | 0.119  0.918 | 0.093  0.919  |  1.2 min
  8.0     338    0.0046   |  0.096  | 0.108  0.912 | 0.091  0.920  |  1.2 min
  9.0     338    0.0028   |  0.094  | 0.085  0.924 | 0.091  0.919  |  1.2 min
 10.0     338    0.0010   |  0.093  | 0.102  0.910 | 0.090  0.921  |  1.2 min
 11.0     338    0.0028   |  0.099  | 0.102  0.904 | 0.091  0.920  |  1.2 min
 12.0     338    0.0046   |  0.097  | 0.105  0.914 | 0.090  0.920  |  1.2 min
 13.0     338    0.0064   |  0.095  | 0.080  0.942 | 0.091  0.918  |  1.2 min
 14.0     338    0.0082   |  0.094  | 0.086  0.922 | 0.093  0.918  |  1.2 min
 15.0     338    0.0100   |  0.088  | 0.095  0.931 | 0.090  0.918  |  1.2 min
 16.0     338    0.0082   |  0.096  | 0.114  0.898 | 0.089  0.921  |  1.2 min
 17.0     338    0.0064   |  0.091  | 0.099  0.905 | 0.088  0.920  |  1.3 min
 18.0     338    0.0046   |  0.090  | 0.087  0.929 | 0.088  0.921  |  1.3 min
 19.0     338    0.0028   |  0.094  | 0.134  0.887 | 0.087  0.922  |  1.3 min
 20.0     338    0.0010   |  0.092  | 0.071  0.939 | 0.086  0.922  |  1.3 min
 21.0     338    0.0028   |  0.093  | 0.083  0.927 | 0.086  0.922  |  1.3 min
 22.0     338    0.0046   |  0.087  | 0.066  0.954 | 0.087  0.921  |  1.3 min
 23.0     338    0.0064   |  0.089  | 0.100  0.904 | 0.089  0.917  |  1.3 min
 24.0     338    0.0082   |  0.086  | 0.095  0.916 | 0.088  0.921  |  1.3 min
 25.0     338    0.0100   |  0.091  | 0.089  0.921 | 0.088  0.921  |  1.3 min
 26.0     338    0.0082   |  0.093  | 0.082  0.912 | 0.087  0.923  |  1.3 min
 27.0     338    0.0064   |  0.092  | 0.100  0.910 | 0.086  0.923  |  1.3 min
 28.0     338    0.0046   |  0.087  | 0.076  0.944 | 0.086  0.922  |  1.3 min
 29.0     338    0.0028   |  0.087  | 0.060  0.946 | 0.085  0.925  |  1.3 min
 30.0     338    0.0010   |  0.084  | 0.098  0.905 | 0.084  0.925  |  1.3 min
 31.0     338    0.0028   |  0.087  | 0.106  0.892 | 0.084  0.925  |  1.3 min
 32.0     338    0.0046   |  0.091  | 0.081  0.912 | 0.085  0.923  |  1.3 min
 33.0     338    0.0064   |  0.086  | 0.087  0.919 | 0.085  0.924  |  1.3 min
 34.0     338    0.0082   |  0.086  | 0.079  0.950 | 0.088  0.920  |  1.3 min
 35.0     338    0.0100   |  0.087  | 0.077  0.923 | 0.088  0.921  |  1.3 min
 36.0     338    0.0082   |  0.085  | 0.091  0.915 | 0.086  0.923  |  1.3 min
 37.0     338    0.0064   |  0.089  | 0.081  0.939 | 0.086  0.923  |  1.3 min
 38.0     338    0.0046   |  0.089  | 0.075  0.932 | 0.084  0.925  |  1.3 min
 39.0     338    0.0028   |  0.077  | 0.076  0.946 | 0.084  0.925  |  1.3 min
 40.0     338    0.0010   |  0.087  | 0.080  0.925 | 0.084  0.924  |  1.3 min
 41.0     338    0.0028   |  0.082  | 0.088  0.918 | 0.084  0.924  |  1.3 min
 41.6     200    0.0046   |  0.081  | 0.078  0.938 | ... Process Process-247:
Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.6/multiprocessing/process.py", line 249, in _bootstrap
    self.run()
  File "/opt/anaconda3/lib/python3.6/multiprocessing/process.py", line 93, in run
    self._target(*self._args, **self._kwargs)
  File "/opt/anaconda3/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 35, in _worker_loop
    r = index_queue.get()
  File "/opt/anaconda3/lib/python3.6/multiprocessing/queues.py", line 343, in get
    res = self._reader.recv_bytes()
  File "/opt/anaconda3/lib/python3.6/multiprocessing/connection.py", line 216, in recv_bytes
    buf = self._recv_bytes(maxlength)
  File "/opt/anaconda3/lib/python3.6/multiprocessing/connection.py", line 407, in _recv_bytes
    buf = self._recv(4)
  File "/opt/anaconda3/lib/python3.6/multiprocessing/connection.py", line 379, in _recv
    chunk = read(handle, remaining)
KeyboardInterrupt
Process Process-249:
Process Process-248:
Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.6/multiprocessing/process.py", line 249, in _bootstrap
    self.run()
  File "/opt/anaconda3/lib/python3.6/multiprocessing/process.py", line 93, in run
    self._target(*self._args, **self._kwargs)
  File "/opt/anaconda3/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 41, in _worker_loop
    samples = collate_fn([dataset[i] for i in batch_indices])
  File "/opt/anaconda3/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 41, in <listcomp>
    samples = collate_fn([dataset[i] for i in batch_indices])
  File "/root/share/project/pytorch/build/standard-7/net/dataset/kgforest.py", line 239, in __getitem__
    img = t(img)
  File "/root/share/project/pytorch/build/standard-7/train-forest-0.py", line 392, in <lambda>
    lambda x: randomDistort1(x, limit=0.5, u=0.5),
  File "/root/share/project/pytorch/build/standard-7/net/dataset/tool.py", line 232, in randomDistort1
    map_x, map_y = cv2.initUndistortRectifyMap(intrinsics, dist_coeffs, None, None, (width,height),cv2.CV_32FC1)
KeyboardInterrupt
Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.6/multiprocessing/process.py", line 249, in _bootstrap
    self.run()
  File "/opt/anaconda3/lib/python3.6/multiprocessing/process.py", line 93, in run
    self._target(*self._args, **self._kwargs)
  File "/opt/anaconda3/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 41, in _worker_loop
    samples = collate_fn([dataset[i] for i in batch_indices])
  File "/opt/anaconda3/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 41, in <listcomp>
    samples = collate_fn([dataset[i] for i in batch_indices])
  File "/root/share/project/pytorch/build/standard-7/net/dataset/kgforest.py", line 239, in __getitem__
    img = t(img)
  File "/root/share/project/pytorch/build/standard-7/train-forest-0.py", line 389, in <lambda>
    lambda x: randomShiftScaleRotate(x, u=0.75, shift_limit=16, scale_limit=0.10, rotate_limit=45),
  File "/root/share/project/pytorch/build/standard-7/net/dataset/tool.py", line 185, in randomShiftScaleRotate
    img = cv2.warpPerspective(img, mat, (width,height),flags=cv2.INTER_LINEAR,borderMode=cv2.BORDER_REFLECT_101)  #cv2.BORDER_CONSTANT, borderValue = (0, 0, 0))  #cv2.BORDER_REFLECT_101
KeyboardInterrupt
Traceback (most recent call last):
  File "/root/share/project/pytorch/build/standard-7/train-forest-0.py", line 1200, in <module>
    do_training()
  File "/root/share/project/pytorch/build/standard-7/train-forest-0.py", line 552, in do_training
    sum_smooth_loss += loss.data[0]
KeyboardInterrupt

Process finished with exit code 1
